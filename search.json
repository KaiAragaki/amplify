[{"path":"https://kaiaragaki.github.io/amplify/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 amplify authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://kaiaragaki.github.io/amplify/articles/analyzing-ddctqrtpcr.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Analyzing ddCt qPCR with amplify","text":"PCR data appear simple work outset - QuantStudio can output barcharts, even readily outputs data tabular formats. However, tasks, like omitting particular measurement, longer make results valid. One must remember omit QuantStudio, recalculate values, plot results - risk inaccurate plot! Additionally, plots output QuantStudio fairly ugly inflexible. Outputting tedious, rearranging columns. vignette, ’ll perform routine analysis rather untidy dataset using pcr_* suite functions. pcr_* suite functions seek make life little easier lot reproducible allowing many previously QuantStudio specific tasks done R.","code":""},{"path":"https://kaiaragaki.github.io/amplify/articles/analyzing-ddctqrtpcr.html","id":"reading-in-data","dir":"Articles","previous_headings":"","what":"Reading in Data","title":"Analyzing ddCt qPCR with amplify","text":"particular advantage although data untidy, untidy specific way. Reading data simple running read_pcr scrub (re-exports mop package), given path pcr .xls(x) file. path given, interactive file explorer window appear user choose file. typical format PCR data woefully non-rectangular. amplify fixes skipping good bits, also pulling useful metadata supplied header footer dataset - like last columns:","code":"library(amplify) library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union library(ggplot2) library(stringr) dat <- system.file(\"extdata\", \"untidy-pcr-example-2.xlsx\", package = \"amplify\") |>   read_pcr() |>   scrub() #>  #> ── Column specification ──────────────────────────────────────────────────────── #> cols( #>   .default = col_double(), #>   `Well Position` = col_character(), #>   Omit = col_logical(), #>   `Sample Name` = col_character(), #>   `Target Name` = col_character(), #>   Task = col_character(), #>   Reporter = col_character(), #>   Quencher = col_character(), #>   Quantity = col_logical(), #>   `Quantity Mean` = col_logical(), #>   `Quantity SD` = col_logical(), #>   CT = col_character(), #>   `Delta Ct` = col_logical(), #>   `Automatic Ct Threshold` = col_logical(), #>   `Automatic Baseline` = col_logical(), #>   Comments = col_logical(), #>   EXPFAIL = col_character(), #>   HIGHSD = col_character(), #>   NOAMP = col_character(), #>   THOLDFAIL = col_character() #> ) #> ℹ Use `spec()` for the full column specifications. #> ! Multiple files in zip: reading ''[Content_Types].xml'' #> Object is not tidy - tidying. dat #> # A tibble: 384 × 41 #>     .row  .col  well well_position omit  sample_name target_name task   reporter #>    <dbl> <dbl> <dbl> <chr>         <lgl> <chr>       <chr>       <chr>  <chr>    #>  1     1     1    NA NA            NA    NA          NA          NA     NA       #>  2     1     2     2 A2            FALSE UC3 PBS     CDH1        UNKNO… FAM      #>  3     1     3     3 A3            FALSE UC3 PBS     CDH1        UNKNO… FAM      #>  4     1     4     4 A4            FALSE UC3 Drug    CDH1        UNKNO… FAM      #>  5     1     5     5 A5            FALSE UC3 Drug    CDH1        UNKNO… FAM      #>  6     1     6     6 A6            FALSE UC3 Drug    CDH1        UNKNO… FAM      #>  7     1     7     7 A7            FALSE T24 PBS     CDH1        UNKNO… FAM      #>  8     1     8     8 A8            FALSE T24 PBS     CDH1        UNKNO… FAM      #>  9     1     9     9 A9            FALSE T24 PBS     CDH1        UNKNO… FAM      #> 10     1    10    10 A10           FALSE T24 Drug    CDH1        UNKNO… FAM      #> # ℹ 374 more rows #> # ℹ 32 more variables: quencher <chr>, quantity <lgl>, quantity_mean <lgl>, #> #   quantity_sd <lgl>, rq <dbl>, rq_min <dbl>, rq_max <dbl>, ct <dbl>, #> #   ct_mean <dbl>, ct_sd <dbl>, delta_ct <lgl>, delta_ct_mean <dbl>, #> #   delta_ct_sd <dbl>, delta_ct_se <dbl>, delta_delta_ct <dbl>, #> #   automatic_ct_threshold <lgl>, ct_threshold <dbl>, automatic_baseline <lgl>, #> #   baseline_start <dbl>, baseline_end <dbl>, comments <lgl>, expfail <chr>, … select(dat, analysis_type:reference_sample) #> # A tibble: 384 × 4 #>    analysis_type endogenous_control rq_min_max_confidence_level reference_sample #>    <chr>         <chr>              <chr>                       <chr>            #>  1 Singleplex    PPIA               95.0                        RT112 Drug       #>  2 Singleplex    PPIA               95.0                        RT112 Drug       #>  3 Singleplex    PPIA               95.0                        RT112 Drug       #>  4 Singleplex    PPIA               95.0                        RT112 Drug       #>  5 Singleplex    PPIA               95.0                        RT112 Drug       #>  6 Singleplex    PPIA               95.0                        RT112 Drug       #>  7 Singleplex    PPIA               95.0                        RT112 Drug       #>  8 Singleplex    PPIA               95.0                        RT112 Drug       #>  9 Singleplex    PPIA               95.0                        RT112 Drug       #> 10 Singleplex    PPIA               95.0                        RT112 Drug       #> # ℹ 374 more rows"},{"path":"https://kaiaragaki.github.io/amplify/articles/analyzing-ddctqrtpcr.html","id":"plate-plotting-with-pcr_plate_view","dir":"Articles","previous_headings":"","what":"Plate Plotting with pcr_plate_view","title":"Analyzing ddCt qPCR with amplify","text":"pcr_plate_view makes easy get bird’s-eye view plate:  high level overview lets us see ’s something curious going A1. Additionally, wells bottom - likely non-targeting controls - two instead three wells ascribed . sample layout?  can also look CT:  Looks like didn’t amplify . might consider looking rq …  Immediately see loss information: scales cell lines wildly different, targets aren’t even ! ’s going ? remember back, reference sample RT112, appear express one targets . Therefore quantity relative 0 doesn’t make sense!","code":"pcr_plate_view(dat) pcr_plate_view(dat, sample_name) pcr_plate_view(dat, fill = ct) +   scale_color_viridis_c(end = 0.9) pcr_plate_view(dat, fill = rq) +   scale_color_viridis_c()"},{"path":"https://kaiaragaki.github.io/amplify/articles/analyzing-ddctqrtpcr.html","id":"expression-plotting-with-pcr_plot","dir":"Articles","previous_headings":"","what":"Expression Plotting with pcr_plot","title":"Analyzing ddCt qPCR with amplify","text":"can naively plot data using pcr_plot  notice differences cell lines, large dynamic range makes difficult look differences conditions. can split data cell line recalculate rqs individually.","code":"pcr_plot(dat) #> Warning: Removed 24 rows containing missing values or values outside the scale range #> (`geom_col()`)."},{"path":"https://kaiaragaki.github.io/amplify/articles/analyzing-ddctqrtpcr.html","id":"rescaling-data-with-pcr_rq","dir":"Articles","previous_headings":"","what":"Rescaling Data with pcr_rq","title":"Analyzing ddCt qPCR with amplify","text":"First, need extract cell line sample name. Additionally, don’t like says “Zeb1” “Zeb2” instead “ZEB1” “ZEB2” (capitalization may mislead people thinking murine, fact human). ’ll change . example, let’s look UC14:  personally prefer control left experimental conditions right - let’s flip . ’re , let’s get rid legend - doesn’t tell us extra information just taking space.  kind reorganization can done target_names well - wanted put control target (PPIA) end.","code":"dat <- dat |>   mutate(cell_line = str_extract(sample_name, \"^.*(?=[:space:])\")) |>   mutate(target_name = str_replace(target_name, \"Zeb\", \"ZEB\")) uc14 <- dat |>   filter(cell_line == \"UC14\") |>   pcr_rq(\"UC14 PBS\")  pcr_plot(uc14) #> Warning: Removed 2 rows containing missing values or values outside the scale range #> (`geom_col()`). uc14 <- uc14 |>   mutate(sample_name = factor(sample_name, levels = c(\"UC14 PBS\", \"UC14 Drug\")))  pcr_plot(uc14) +   theme(legend.position = \"none\") #> Warning: Removed 2 rows containing missing values or values outside the scale range #> (`geom_col()`)."},{"path":"https://kaiaragaki.github.io/amplify/articles/analyzing-ddctqrtpcr.html","id":"ommiting-a-case","dir":"Articles","previous_headings":"","what":"Ommiting a case","title":"Analyzing ddCt qPCR with amplify","text":"Suppose reason believe one colleagues (perhaps ) spit C22 well (spit accurate). naively remove , get:  Umm…doesn’t look different. ’s expect: plotting function doesn’t calculations: plots values already stored within . get updated values, need use pcr_rq :  Now, see ZEB1 values updated reflect omission made.","code":"naive <- uc14 |>    filter(well_position != \"C24\")  pcr_plot(naive) #> Warning: Removed 2 rows containing missing values or values outside the scale range #> (`geom_col()`). wise <- uc14 |>    filter(well_position != \"C24\") |>   pcr_rq(\"UC14 PBS\")  pcr_plot(wise) #> Warning: Removed 2 rows containing missing values or values outside the scale range #> (`geom_col()`)."},{"path":"https://kaiaragaki.github.io/amplify/articles/performing-lib-quant-qc.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Performing Library Quantification QC","text":"RNA libraries generated, absolute concentrations need established can evenly loaded onto chip correct concentration. order measure RNA library concentration, qPCR standard curve performed. amplify offers several functions : Determine quality assay , assay went well, Determine concentration RNA libraries.","code":""},{"path":"https://kaiaragaki.github.io/amplify/articles/performing-lib-quant-qc.html","id":"reading-and-tidying-data","dir":"Articles","previous_headings":"","what":"Reading and Tidying Data","title":"Performing Library Quantification QC","text":"amplify takes ‘results’ (.xls(x)) files exported QuantStudio. can read read_pcr tidied easily providing path tidy_lab. also add pad_zero = TRUE, changes default value , say Sample 1 Sample 01. help plotting order line. default, pcr_tidy assumes standards serial dilution starting 6.8, diluted factor 10, going way 0.00068, want . couple instances might case: different serial dilution want remove particularly heinous standards throw slope calculation included instance, supply numeric vector usr_standards argument. wish omit given set standards, simply include vector: automatically update slope column dataframe well. can called standalone (say, manually removing standards replicates dataset) running pcr_calc_slope","code":"tidy_lib <- system.file(\"extdata\", \"untidy-standard-curve.xlsx\", package = \"amplify\") |>   read_pcr() |>   tidy_lab(pad_zero = TRUE) #>  #> ── Column specification ──────────────────────────────────────────────────────── #> cols( #>   .default = col_double(), #>   `Well Position` = col_character(), #>   Omit = col_logical(), #>   `Sample Name` = col_character(), #>   `Target Name` = col_character(), #>   Task = col_character(), #>   Reporter = col_character(), #>   Quencher = col_character(), #>   CT = col_character(), #>   `Automatic Ct Threshold` = col_logical(), #>   `Automatic Baseline` = col_logical(), #>   Comments = col_logical() #> ) #> ℹ Use `spec()` for the full column specifications. #> ! Multiple files in zip: reading ''[Content_Types].xml''  # scrub - from {mop} - turns an object into a data.frame scrub(tidy_lib) #> # A tibble: 96 × 32 #>     .row  .col  well well_position omit  sample_name target_name task   reporter #>    <dbl> <dbl> <dbl> <chr>         <lgl> <chr>       <chr>       <chr>  <chr>    #>  1     1     1     1 A1            FALSE Standard 01 Target 1    STAND… FAM      #>  2     1     2     2 A2            FALSE Standard 01 Target 1    STAND… FAM      #>  3     1     3     3 A3            FALSE Standard 01 Target 1    STAND… FAM      #>  4     1     4    NA NA            NA    NA          NA          NA     NA       #>  5     1     5     5 A5            FALSE Sample 01   Target 1    UNKNO… FAM      #>  6     1     6     6 A6            FALSE Sample 01   Target 1    UNKNO… FAM      #>  7     1     7    NA NA            NA    NA          NA          NA     NA       #>  8     1     8     8 A8            FALSE Sample 09   Target 1    UNKNO… FAM      #>  9     1     9     9 A9            FALSE Sample 09   Target 1    UNKNO… FAM      #> 10     1    10    NA NA            NA    NA          NA          NA     NA       #> # ℹ 86 more rows #> # ℹ 23 more variables: quencher <chr>, ct <dbl>, ct_mean <dbl>, ct_sd <dbl>, #> #   quantity <dbl>, quantity_mean <dbl>, quantity_sd <dbl>, #> #   automatic_ct_threshold <lgl>, ct_threshold <dbl>, automatic_baseline <lgl>, #> #   baseline_start <dbl>, baseline_end <dbl>, comments <lgl>, #> #   y_intercept <dbl>, r_superscript_2 <dbl>, slope <dbl>, efficiency <dbl>, #> #   positions <dbl>, name <chr>, usr_quantity <dbl>, date <date>, … custom_lib <- system.file(\"extdata\", \"untidy-standard-curve.xlsx\", package = \"amplify\") |>   read_pcr() |>   tidy_lab(pad_zero = TRUE, usr_standards = c(6.8, .68, .068, .0068)) #>  #> ── Column specification ──────────────────────────────────────────────────────── #> cols( #>   .default = col_double(), #>   `Well Position` = col_character(), #>   Omit = col_logical(), #>   `Sample Name` = col_character(), #>   `Target Name` = col_character(), #>   Task = col_character(), #>   Reporter = col_character(), #>   Quencher = col_character(), #>   CT = col_character(), #>   `Automatic Ct Threshold` = col_logical(), #>   `Automatic Baseline` = col_logical(), #>   Comments = col_logical() #> ) #> ℹ Use `spec()` for the full column specifications. #> ! Multiple files in zip: reading ''[Content_Types].xml'' #> 2 rows of standards did not have a matching value in 'standards' and have been dropped  scrub(custom_lib) #> # A tibble: 96 × 32 #>     .row  .col  well well_position omit  sample_name target_name task   reporter #>    <dbl> <dbl> <dbl> <chr>         <lgl> <chr>       <chr>       <chr>  <chr>    #>  1     1     1     1 A1            FALSE Standard 01 Target 1    STAND… FAM      #>  2     1     2     2 A2            FALSE Standard 01 Target 1    STAND… FAM      #>  3     1     3     3 A3            FALSE Standard 01 Target 1    STAND… FAM      #>  4     1     4    NA NA            NA    NA          NA          NA     NA       #>  5     1     5     5 A5            FALSE Sample 01   Target 1    UNKNO… FAM      #>  6     1     6     6 A6            FALSE Sample 01   Target 1    UNKNO… FAM      #>  7     1     7    NA NA            NA    NA          NA          NA     NA       #>  8     1     8     8 A8            FALSE Sample 09   Target 1    UNKNO… FAM      #>  9     1     9     9 A9            FALSE Sample 09   Target 1    UNKNO… FAM      #> 10     1    10    NA NA            NA    NA          NA          NA     NA       #> # ℹ 86 more rows #> # ℹ 23 more variables: quencher <chr>, ct <dbl>, ct_mean <dbl>, ct_sd <dbl>, #> #   quantity <dbl>, quantity_mean <dbl>, quantity_sd <dbl>, #> #   automatic_ct_threshold <lgl>, ct_threshold <dbl>, automatic_baseline <lgl>, #> #   baseline_start <dbl>, baseline_end <dbl>, comments <lgl>, #> #   y_intercept <dbl>, r_superscript_2 <dbl>, slope <dbl>, efficiency <dbl>, #> #   positions <dbl>, name <chr>, usr_quantity <dbl>, date <date>, …"},{"path":"https://kaiaragaki.github.io/amplify/articles/performing-lib-quant-qc.html","id":"calculating-library-concentration","dir":"Articles","previous_headings":"","what":"Calculating Library Concentration","title":"Performing Library Quantification QC","text":"can perform quality control, first need calculate concentration RNA library samples. supply dilution factor calculate concentration original libraries concentration libraries assay (diluted 1:1000).","code":"lib_conc <- tidy_lib |>    pcr_lib_calc(dil_factor = 1000)  lib_conc |>   scrub() |>   select(sample_name, concentration) #> Adding missing grouping variables: `task` #> # A tibble: 96 × 3 #> # Groups:   task [4] #>    task     sample_name concentration #>    <chr>    <chr>               <dbl> #>  1 NTC      NA                     NA #>  2 NTC      NA                     NA #>  3 NTC      NA                     NA #>  4 STANDARD Standard 01            NA #>  5 STANDARD Standard 01            NA #>  6 STANDARD Standard 01            NA #>  7 STANDARD Standard 02            NA #>  8 STANDARD Standard 02            NA #>  9 STANDARD Standard 03            NA #> 10 STANDARD Standard 03            NA #> # ℹ 86 more rows"},{"path":"https://kaiaragaki.github.io/amplify/articles/performing-lib-quant-qc.html","id":"generating-quality-control-data","dir":"Articles","previous_headings":"","what":"Generating Quality Control Data","title":"Performing Library Quantification QC","text":"Quality control metrics also need calculated. can calling pcr_lib_qc data output pcr_lib_calc: output generally useful . Using pcr_lib_qc_plot_* functions , however, generates plots display valuable visual QC summaries","code":"lib_qc <- lib_conc |>    pcr_lib_qc()  lib_qc #> $standards #> # A tibble: 13 × 19 #> # Groups:   sample_name [5] #>    sample_name task     quantity_mean concentration quantity quant_actual   dil #>    <chr>       <chr>            <dbl>         <dbl>    <dbl>        <dbl> <dbl> #>  1 Standard 01 STANDARD            NA            NA 6.80         6.80      0    #>  2 Standard 01 STANDARD            NA            NA 6.80         6.80      0    #>  3 Standard 01 STANDARD            NA            NA 6.80         6.80      0    #>  4 Standard 02 STANDARD            NA            NA 0.680        0.734     9.27 #>  5 Standard 02 STANDARD            NA            NA 0.680        0.734     9.27 #>  6 Standard 03 STANDARD            NA            NA 0.0680       0.0603   12.2  #>  7 Standard 03 STANDARD            NA            NA 0.0680       0.0603   12.2  #>  8 Standard 03 STANDARD            NA            NA 0.0680       0.0603   12.2  #>  9 Standard 04 STANDARD            NA            NA 0.00680      0.00568  10.6  #> 10 Standard 04 STANDARD            NA            NA 0.00680      0.00568  10.6  #> 11 Standard 04 STANDARD            NA            NA 0.00680      0.00568  10.6  #> 12 Standard 05 STANDARD            NA            NA 0.000680     0.000417 13.6  #> 13 Standard 05 STANDARD            NA            NA 0.000680     0.000417 13.6  #> # ℹ 12 more variables: slope <dbl>, efficiency <dbl>, r_superscript_2 <dbl>, #> #   ct <dbl>, no_po_mean <dbl>, no_po_sd <dbl>, keep <lgl>, keep_temp <lgl>, #> #   mean_adj <dbl>, sd_adj <dbl>, quant_adj <dbl>, z <dbl> #>  #> $samples #> # A tibble: 42 × 19 #> # Groups:   sample_name [16] #>    sample_name task    quantity_mean concentration quantity quant_actual   dil #>    <chr>       <chr>           <dbl>         <dbl>    <dbl>        <dbl> <dbl> #>  1 Sample 06   UNKNOWN          2.04         2039.     2.06         2.06    NA #>  2 Sample 06   UNKNOWN          2.04         2039.     2.12         2.12    NA #>  3 Sample 06   UNKNOWN          2.04         2039.     1.94         1.94    NA #>  4 Sample 12   UNKNOWN          1.89         1893.     1.93         1.93    NA #>  5 Sample 12   UNKNOWN          1.89         1893.     1.88         1.88    NA #>  6 Sample 12   UNKNOWN          1.89         1893.     1.87         1.87    NA #>  7 Sample 04   UNKNOWN          1.69         1694.     1.62         1.62    NA #>  8 Sample 04   UNKNOWN          1.69         1694.     1.84         1.84    NA #>  9 Sample 04   UNKNOWN          1.69         1694.     1.62         1.62    NA #> 10 Sample 16   UNKNOWN          1.49         1493.     1.46         1.46    NA #> # ℹ 32 more rows #> # ℹ 12 more variables: slope <dbl>, efficiency <dbl>, r_superscript_2 <dbl>, #> #   ct <dbl>, no_po_mean <dbl>, no_po_sd <dbl>, keep <lgl>, keep_temp <lgl>, #> #   mean_adj <dbl>, sd_adj <dbl>, quant_adj <dbl>, z <dbl> #>  #> $sample_summary #> # A tibble: 16 × 3 #>    sample_name quantity_mean quant_adj #>    <chr>               <dbl>     <dbl> #>  1 Sample 01           0.599     0.599 #>  2 Sample 02           1.05      1.05  #>  3 Sample 03           1.37      1.39  #>  4 Sample 04           1.69      1.62  #>  5 Sample 05           0.903     0.888 #>  6 Sample 06           2.04      2.09  #>  7 Sample 07           1.13      1.15  #>  8 Sample 08           1.09      1.09  #>  9 Sample 09           1.22      1.22  #> 10 Sample 10           1.07      1.07  #> 11 Sample 11           1.03      1.03  #> 12 Sample 12           1.89      1.87  #> 13 Sample 13           0.583     0.583 #> 14 Sample 14           1.22      1.17  #> 15 Sample 15           0.713     0.713 #> 16 Sample 16           1.49      1.42  #>  #> $standard_summary #> # A tibble: 5 × 4 #>   sample_name   dil quantity_mean quant_actual #>   <chr>       <dbl>         <dbl>        <dbl> #> 1 Standard 01  0         6.80         6.80     #> 2 Standard 02  9.27      0.680        0.734    #> 3 Standard 03 12.2       0.0680       0.0603   #> 4 Standard 04 10.6       0.00680      0.00568  #> 5 Standard 05 13.6       0.000680     0.000417 #>  #> $outliers #> # A tibble: 55 × 19 #> # Groups:   sample_name [21] #>    sample_name task     quantity_mean concentration quantity quant_actual   dil #>    <chr>       <chr>            <dbl>         <dbl>    <dbl>        <dbl> <dbl> #>  1 Standard 01 STANDARD            NA            NA  6.80         6.80     0    #>  2 Standard 01 STANDARD            NA            NA  6.80         6.80     0    #>  3 Standard 01 STANDARD            NA            NA  6.80         6.80     0    #>  4 Standard 02 STANDARD            NA            NA  0.680        0.734    9.27 #>  5 Standard 02 STANDARD            NA            NA  0.680        0.734    9.27 #>  6 Standard 03 STANDARD            NA            NA  0.0680       0.0603  12.2  #>  7 Standard 03 STANDARD            NA            NA  0.0680       0.0603  12.2  #>  8 Standard 03 STANDARD            NA            NA  0.0680       0.0603  12.2  #>  9 Standard 04 STANDARD            NA            NA  0.00680      0.00568 10.6  #> 10 Standard 04 STANDARD            NA            NA  0.00680      0.00568 10.6  #> # ℹ 45 more rows #> # ℹ 12 more variables: slope <dbl>, efficiency <dbl>, r_superscript_2 <dbl>, #> #   ct <dbl>, no_po_mean <dbl>, no_po_sd <dbl>, keep <lgl>, keep_temp <lgl>, #> #   mean_adj <dbl>, sd_adj <dbl>, quant_adj <dbl>, z <dbl>"},{"path":"https://kaiaragaki.github.io/amplify/articles/performing-lib-quant-qc.html","id":"standard-dilution-plot","dir":"Articles","previous_headings":"Generating Quality Control Data","what":"Standard Dilution Plot","title":"Performing Library Quantification QC","text":"Making standard curve libraries requires making serial dilution standards. important determine serial dilution diluted properly, results calculated unreliable. standard dilution plot helps :  plot, can see relative dilution factors samples. example, can see 9.3x dilution first second, 12.2x dilution second third, etc. gray dots represent blue dots land dilutions perfect efficiency 100%. red dots represent samples lie. plot can catch three sources issues: Inconsistent pipetting, show dilution factors widely varying 10x Systematically incorrect pipetting, show dilutions consistently 10x Poor efficiency enzyme, appear show dilutions consistently 10x. Determining efficiency issues vs consistently -pipetting impossible determine data alone. Ensure calibrated pipettes practicing proper pipetting techniques ensure consistent, accurate volumes.","code":"lib_qc |>    pcr_lib_qc_plot_dil()"},{"path":"https://kaiaragaki.github.io/amplify/articles/performing-lib-quant-qc.html","id":"standard-slope-plot","dir":"Articles","previous_headings":"Generating Quality Control Data","what":"Standard Slope Plot","title":"Performing Library Quantification QC","text":"plot, log10 theoretical values standards plotted Ct values standards. perfect world, expect standard 1/10th concentration reach level amplification around 3.3 cycles. ? perfect world, expect perfect doubling product. 23.3≈102^{3.3}\\approx 10. Thus, perfect world expect see slope -3.3, R2R^2 1, efficiency 100%. Things rarely perfect, however. 100% efficiency upper bound. Therefore, efficiency >80% considered acceptable. outlier standards may make efficiency artificially low high. cases can remove standards recalculate slope still get accurate concentrations, without redo qPCR run: Standards much dilute sample concentrations outliers technical replicate standard outlier One instances recommended simply remove outliers: standards within range sample concentrations. poor dilution done upstream samples affect concentrations downstream, making accurate determination absolute library concentration impossible. ever doubt, probably bite bullet redo qPCR.","code":"lib_qc |>    pcr_lib_qc_plot_slope()"},{"path":"https://kaiaragaki.github.io/amplify/articles/performing-lib-quant-qc.html","id":"plot-outliers","dir":"Articles","previous_headings":"Generating Quality Control Data","what":"Plot Outliers","title":"Performing Library Quantification QC","text":"’s often best remove technical replicate outliers order obtain accurate estimate concentration. point deemed outlier >3Z away mean two. Shown , outliers gray, zone inclusion blue. Particularly egregious outliers shown (<<<) (>>>) number standard deviations away . instance , 463Z away! New estimates, sans outliers, found quant_adj column sample_summary: can visualized using pcr_lib_qc_conc: plot shows unadjusted concentrations gray, concentrations outlier removal blue. full HTML report can produced running pcr_lib_qc_report:","code":"lib_qc |>    pcr_lib_qc_plot_outliers() #> Warning: Removed 54 rows containing missing values or values outside the scale range #> (`geom_text()`). #> Warning: Removed 1 row containing missing values or values outside the scale range #> (`geom_point()`). lib_qc$sample_summary #> # A tibble: 16 × 3 #>    sample_name quantity_mean quant_adj #>    <chr>               <dbl>     <dbl> #>  1 Sample 01           0.599     0.599 #>  2 Sample 02           1.05      1.05  #>  3 Sample 03           1.37      1.39  #>  4 Sample 04           1.69      1.62  #>  5 Sample 05           0.903     0.888 #>  6 Sample 06           2.04      2.09  #>  7 Sample 07           1.13      1.15  #>  8 Sample 08           1.09      1.09  #>  9 Sample 09           1.22      1.22  #> 10 Sample 10           1.07      1.07  #> 11 Sample 11           1.03      1.03  #> 12 Sample 12           1.89      1.87  #> 13 Sample 13           0.583     0.583 #> 14 Sample 14           1.22      1.17  #> 15 Sample 15           0.713     0.713 #> 16 Sample 16           1.49      1.42 lib_qc |>    pcr_lib_qc_plot_conc() lib_qc |>    amplify::pcr_lib_qc_report(\"path/to/file.html\")"},{"path":"https://kaiaragaki.github.io/amplify/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Kai Aragaki. Author, maintainer.","code":""},{"path":"https://kaiaragaki.github.io/amplify/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Aragaki K (2024). amplify: Automate PCR Tasks Reproducibly. R package version 0.1.0, https://kaiaragaki.github.io/amplify/.","code":"@Manual{,   title = {amplify: Automate PCR Tasks Reproducibly},   author = {Kai Aragaki},   year = {2024},   note = {R package version 0.1.0},   url = {https://kaiaragaki.github.io/amplify/}, }"},{"path":"https://kaiaragaki.github.io/amplify/index.html","id":"amplify-","dir":"","previous_headings":"","what":"Automate PCR Tasks Reproducibly","title":"Automate PCR Tasks Reproducibly","text":"amplify automates routine pcr-based tasks - including plate planning, dilution making, visualizing, analyzing.","code":""},{"path":"https://kaiaragaki.github.io/amplify/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Automate PCR Tasks Reproducibly","text":"can install package GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"KaiAragaki/amplify\") library(amplify) library(readxl) library(knitr) library(dplyr)"},{"path":"https://kaiaragaki.github.io/amplify/index.html","id":"tidying-qpcr-data","dir":"","previous_headings":"","what":"Tidying qPCR data","title":"Automate PCR Tasks Reproducibly","text":"Data exported QuantStudio fairly non-standard: amplify provides read_pcr read tidy_lab ({mop}) automatically tidy files. scrub (also {mop}) can convert tidy_lab objects data.frames works ddCt standard curve result files.","code":"untidy_file_path <- system.file(\"extdata\", \"untidy-pcr-example.xls\", package = \"amplify\")  untidy_file_path |>    read_excel() |>   select(1:10) |>    head() #> New names: #> • `` -> `...3` #> • `` -> `...4` #> • `` -> `...5` #> • `` -> `...6` #> • `` -> `...7` #> • `` -> `...8` #> • `` -> `...9` #> • `` -> `...10` #> • `` -> `...11` #> • `` -> `...12` #> • `` -> `...13` #> # A tibble: 6 × 10 #>   `Block Type`  `384-Well Block` ...3  ...4  ...5  ...6  ...7  ...8  ...9  ...10 #>   <chr>         <chr>            <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> #> 1 Calibration … Yes              <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  #> 2 Calibration … 01-13-2020       <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  #> 3 Calibration … Yes              <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  #> 4 Calibration … 01-13-2020       <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  #> 5 Calibration … Yes              <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  #> 6 Calibration … 01-13-2020       <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA> tidy_pcr <- untidy_file_path |>    read_pcr() |>   tidy_lab() #>  #> ── Column specification ──────────────────────────────────────────────────────── #> cols( #>   .default = col_double(), #>   `Well Position` = col_character(), #>   Omit = col_logical(), #>   `Sample Name` = col_character(), #>   `Target Name` = col_character(), #>   Task = col_character(), #>   Reporter = col_character(), #>   Quencher = col_character(), #>   Quantity = col_logical(), #>   `Quantity Mean` = col_logical(), #>   `Quantity SD` = col_logical(), #>   CT = col_character(), #>   `Delta Ct` = col_logical(), #>   `Automatic Ct Threshold` = col_logical(), #>   `Automatic Baseline` = col_logical(), #>   Comments = col_logical() #> ) #> ℹ Use `spec()` for the full column specifications.  tidy_pcr |>   scrub() |>   select(1:10) |>    head() #> # A tibble: 6 × 10 #>    .row  .col  well well_position omit  sample_name target_name task  reporter #>   <dbl> <dbl> <dbl> <chr>         <lgl> <chr>       <chr>       <chr> <chrℹ 1 more variable: quencher <chr>"},{"path":"https://kaiaragaki.github.io/amplify/index.html","id":"plotting-qpcr-results","dir":"","previous_headings":"","what":"Plotting qPCR results","title":"Automate PCR Tasks Reproducibly","text":"Tidied results can plotted using pcr_plot  Additionally, overviews plate features can done using pcr_plate  details can found Analyzing ddCt qPCR amplify vignette.","code":"tidy_pcr |>    pcr_rq(\"RD1\") |>    pcr_plot() tidy_pcr |>    pcr_plate_view(\"target_name\")"},{"path":[]},{"path":"https://kaiaragaki.github.io/amplify/index.html","id":"library-preparation-quantification-calculation","dir":"","previous_headings":"Library Preparation Quantification","what":"Library Preparation Quantification Calculation","title":"Automate PCR Tasks Reproducibly","text":"RNA library preparation results output Quantstudio can tidied using pcr_tidy: Calculating concentration library (dilution) can performed using pcr_lib_calc:","code":"untidy_lib_path <- system.file(\"extdata\", \"untidy-standard-curve.xlsx\", package = \"amplify\") tidy_lib <- read_pcr(untidy_lib_path) |>   tidy_lab(pad_zero = TRUE)  #>  #> ── Column specification ──────────────────────────────────────────────────────── #> cols( #>   .default = col_double(), #>   `Well Position` = col_character(), #>   Omit = col_logical(), #>   `Sample Name` = col_character(), #>   `Target Name` = col_character(), #>   Task = col_character(), #>   Reporter = col_character(), #>   Quencher = col_character(), #>   CT = col_character(), #>   `Automatic Ct Threshold` = col_logical(), #>   `Automatic Baseline` = col_logical(), #>   Comments = col_logical() #> ) #> ℹ Use `spec()` for the full column specifications. #> ! Multiple files in zip: reading ''[Content_Types].xml'' tidy_lib |>   scrub() |>   select(1:10) |>    head() #> # A tibble: 6 × 10 #>    .row  .col  well well_position omit  sample_name target_name task    reporter #>   <dbl> <dbl> <dbl> <chr>         <lgl> <chr>       <chr>       <chr>   <chr>    #> 1     1     1     1 A1            FALSE Standard 01 Target 1    STANDA… FAM      #> 2     1     2     2 A2            FALSE Standard 01 Target 1    STANDA… FAM      #> 3     1     3     3 A3            FALSE Standard 01 Target 1    STANDA… FAM      #> 4     1     4    NA <NA>          NA    <NA>        <NA>        <NA>    <NA>     #> 5     1     5     5 A5            FALSE Sample 01   Target 1    UNKNOWN FAM      #> 6     1     6     6 A6            FALSE Sample 01   Target 1    UNKNOWN FAM      #> # ℹ 1 more variable: quencher <chr> calc_lib <- pcr_lib_calc(tidy_lib)   calc_lib |>   scrub() |>   filter(task == \"UNKNOWN\") |>   select(sample_name, concentration) |>   head() #> Adding missing grouping variables: `task` #> # A tibble: 6 × 3 #> # Groups:   task [1] #>   task    sample_name concentration #>   <chr>   <chr>               <dbl> #> 1 UNKNOWN Sample 06           2039. #> 2 UNKNOWN Sample 06           2039. #> 3 UNKNOWN Sample 06           2039. #> 4 UNKNOWN Sample 12           1893. #> 5 UNKNOWN Sample 12           1893. #> 6 UNKNOWN Sample 12           1893."},{"path":"https://kaiaragaki.github.io/amplify/index.html","id":"library-preparation-quantification-quality-control","dir":"","previous_headings":"Library Preparation Quantification","what":"Library preparation quantification quality control","title":"Automate PCR Tasks Reproducibly","text":"can generate useful plots determine quality quantification run first using pcr_lib_qc: data, , particularly useful. However, suite QC plotting functions can used upon data give insight, :  QC plotting functions can run generate report using pcr_lib_qc_report. information plots available, well interpretations, can found Performing Library Quantification QC","code":"qc <- calc_lib |>    pcr_lib_qc() lapply(qc, head, n = 3) #> $standards #> # A tibble: 3 × 19 #> # Groups:   sample_name [1] #>   sample_name task     quantity_mean concentration quantity quant_actual   dil #>   <chr>       <chr>            <dbl>         <dbl>    <dbl>        <dbl> <dbl> #> 1 Standard 01 STANDARD            NA            NA     6.80         6.80     0 #> 2 Standard 01 STANDARD            NA            NA     6.80         6.80     0 #> 3 Standard 01 STANDARD            NA            NA     6.80         6.80     0 #> # ℹ 12 more variables: slope <dbl>, efficiency <dbl>, r_superscript_2 <dbl>, #> #   ct <dbl>, no_po_mean <dbl>, no_po_sd <dbl>, keep <lgl>, keep_temp <lgl>, #> #   mean_adj <dbl>, sd_adj <dbl>, quant_adj <dbl>, z <dbl> #>  #> $samples #> # A tibble: 3 × 19 #> # Groups:   sample_name [1] #>   sample_name task    quantity_mean concentration quantity quant_actual   dil #>   <chr>       <chr>           <dbl>         <dbl>    <dbl>        <dbl> <dbl> #> 1 Sample 06   UNKNOWN          2.04         2039.     2.06         2.06    NA #> 2 Sample 06   UNKNOWN          2.04         2039.     2.12         2.12    NA #> 3 Sample 06   UNKNOWN          2.04         2039.     1.94         1.94    NA #> # ℹ 12 more variables: slope <dbl>, efficiency <dbl>, r_superscript_2 <dbl>, #> #   ct <dbl>, no_po_mean <dbl>, no_po_sd <dbl>, keep <lgl>, keep_temp <lgl>, #> #   mean_adj <dbl>, sd_adj <dbl>, quant_adj <dbl>, z <dbl> #>  #> $sample_summary #> # A tibble: 3 × 3 #>   sample_name quantity_mean quant_adj #>   <chr>               <dbl>     <dbl> #> 1 Sample 01           0.599     0.599 #> 2 Sample 02           1.05      1.05  #> 3 Sample 03           1.37      1.39  #>  #> $standard_summary #> # A tibble: 3 × 4 #>   sample_name   dil quantity_mean quant_actual #>   <chr>       <dbl>         <dbl>        <dbl> #> 1 Standard 01  0           6.80         6.80   #> 2 Standard 02  9.27        0.680        0.734  #> 3 Standard 03 12.2         0.0680       0.0603 #>  #> $outliers #> # A tibble: 3 × 19 #> # Groups:   sample_name [1] #>   sample_name task     quantity_mean concentration quantity quant_actual   dil #>   <chr>       <chr>            <dbl>         <dbl>    <dbl>        <dbl> <dbl> #> 1 Standard 01 STANDARD            NA            NA     6.80         6.80     0 #> 2 Standard 01 STANDARD            NA            NA     6.80         6.80     0 #> 3 Standard 01 STANDARD            NA            NA     6.80         6.80     0 #> # ℹ 12 more variables: slope <dbl>, efficiency <dbl>, r_superscript_2 <dbl>, #> #   ct <dbl>, no_po_mean <dbl>, no_po_sd <dbl>, keep <lgl>, keep_temp <lgl>, #> #   mean_adj <dbl>, sd_adj <dbl>, quant_adj <dbl>, z <dbl> qc |> pcr_lib_qc_plot_conc() qc |> pcr_lib_qc_report(\"path/to/my/report.html\")"},{"path":"https://kaiaragaki.github.io/amplify/reference/dummy_rna_conc.html","id":null,"dir":"Reference","previous_headings":"","what":"Example data of RNA samples with concentrations — dummy_rna_conc","title":"Example data of RNA samples with concentrations — dummy_rna_conc","text":"dataset containing fabricated sample names RNA concentrations","code":""},{"path":"https://kaiaragaki.github.io/amplify/reference/dummy_rna_conc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example data of RNA samples with concentrations — dummy_rna_conc","text":"","code":"dummy_rna_conc"},{"path":"https://kaiaragaki.github.io/amplify/reference/dummy_rna_conc.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example data of RNA samples with concentrations — dummy_rna_conc","text":"data frame 8 rows 2 columns sample name sample conc concentration RNA, ng/uL","code":""},{"path":"https://kaiaragaki.github.io/amplify/reference/find_mean.html","id":null,"dir":"Reference","previous_headings":"","what":"Find mean of ct without putative outlier — find_mean","title":"Find mean of ct without putative outlier — find_mean","text":"Find mean ct without putative outlier","code":""},{"path":"https://kaiaragaki.github.io/amplify/reference/find_mean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find mean of ct without putative outlier — find_mean","text":"","code":"find_mean(df)"},{"path":"https://kaiaragaki.github.io/amplify/reference/find_mean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find mean of ct without putative outlier — find_mean","text":"df data.frame containing numeric column named ct","code":""},{"path":"https://kaiaragaki.github.io/amplify/reference/find_mean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find mean of ct without putative outlier — find_mean","text":"list, mean sd ct without putative outlier","code":""},{"path":"https://kaiaragaki.github.io/amplify/reference/find_mean.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find mean of ct without putative outlier — find_mean","text":"fewer three rows, values NA, function simply return mean standard deviation without removing putative outlier.","code":""},{"path":"https://kaiaragaki.github.io/amplify/reference/find_outliers.html","id":null,"dir":"Reference","previous_headings":"","what":"Mark outliers and determine means and standard deviation without them — find_outliers","title":"Mark outliers and determine means and standard deviation without them — find_outliers","text":"Mark outliers determine means standard deviation without ","code":""},{"path":"https://kaiaragaki.github.io/amplify/reference/find_outliers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mark outliers and determine means and standard deviation without them — find_outliers","text":"","code":"find_outliers(dat)"},{"path":"https://kaiaragaki.github.io/amplify/reference/find_outliers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mark outliers and determine means and standard deviation without them — find_outliers","text":"dat","code":""},{"path":"https://kaiaragaki.github.io/amplify/reference/find_outliers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mark outliers and determine means and standard deviation without them — find_outliers","text":"tibble","code":""},{"path":"https://kaiaragaki.github.io/amplify/reference/get_best_factor.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate a sensible dilution factor — get_best_factor","title":"Calculate a sensible dilution factor — get_best_factor","text":"volume RNA add < 1uL, must diluted. Dilutions easy calculate one's head integers (divisible 5 preferred). , dilution small reasonably possible, otherwise become dilute.","code":""},{"path":"https://kaiaragaki.github.io/amplify/reference/get_best_factor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate a sensible dilution factor — get_best_factor","text":"","code":"get_best_factor(vol_to_add)"},{"path":"https://kaiaragaki.github.io/amplify/reference/get_best_factor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate a sensible dilution factor — get_best_factor","text":"vol_to_add numeric. 'Naive' volume add, dilution.","code":""},{"path":"https://kaiaragaki.github.io/amplify/reference/get_best_factor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate a sensible dilution factor — get_best_factor","text":"integer, either 1 (dilution) something divisible 5.","code":""},{"path":"https://kaiaragaki.github.io/amplify/reference/get_sample_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Get or make sample names — get_sample_names","title":"Get or make sample names — get_sample_names","text":"user supply sample names (has_names = FALSE), sample names generated form \"Sample_n\".","code":""},{"path":"https://kaiaragaki.github.io/amplify/reference/get_sample_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get or make sample names — get_sample_names","text":"","code":"get_sample_names(data, has_names)"},{"path":"https://kaiaragaki.github.io/amplify/reference/get_sample_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get or make sample names — get_sample_names","text":"data data.frame has_names logical. expect sample names first column?","code":""},{"path":"https://kaiaragaki.github.io/amplify/reference/get_sample_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get or make sample names — get_sample_names","text":"vector sample names","code":""},{"path":"https://kaiaragaki.github.io/amplify/reference/pcr_calc_slope.html","id":null,"dir":"Reference","previous_headings":"","what":"Recalcuate standard slope of quantity vs Ct — pcr_calc_slope","title":"Recalcuate standard slope of quantity vs Ct — pcr_calc_slope","text":"Recalcuate standard slope quantity vs Ct","code":""},{"path":"https://kaiaragaki.github.io/amplify/reference/pcr_calc_slope.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recalcuate standard slope of quantity vs Ct — pcr_calc_slope","text":"","code":"pcr_calc_slope(tidy_pcr)"},{"path":"https://kaiaragaki.github.io/amplify/reference/pcr_calc_slope.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recalcuate standard slope of quantity vs Ct — pcr_calc_slope","text":"tidy_pcr object tidied tidy_pcr","code":""},{"path":"https://kaiaragaki.github.io/amplify/reference/pcr_calc_slope.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Recalcuate standard slope of quantity vs Ct — pcr_calc_slope","text":"tibble updated slope column","code":""},{"path":"https://kaiaragaki.github.io/amplify/reference/pcr_control.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Delta Ct mean based on given control probe — pcr_control","title":"Calculate Delta Ct mean based on given control probe — pcr_control","text":"Calculate Delta Ct mean based given control probe","code":""},{"path":"https://kaiaragaki.github.io/amplify/reference/pcr_control.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Delta Ct mean based on given control probe — pcr_control","text":"","code":"pcr_control(x, control_probe)  # S3 method for class 'pcr' pcr_control(x, control_probe, ...)  # S3 method for class 'data.frame' pcr_control(x, control_probe, ...)"},{"path":"https://kaiaragaki.github.io/amplify/reference/pcr_control.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Delta Ct mean based on given control probe — pcr_control","text":"x pcr data.frame object control_probe probe used endogenous control (eg GAPDH)","code":""},{"path":"https://kaiaragaki.github.io/amplify/reference/pcr_control.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Delta Ct mean based on given control probe — pcr_control","text":"object class input","code":""},{"path":"https://kaiaragaki.github.io/amplify/reference/pcr_control.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Delta Ct mean based on given control probe — pcr_control","text":"","code":"system.file(\"extdata\", \"untidy-pcr-example.xls\", package = \"amplify\") |>   read_pcr() |>   pcr_control(\"GAPDH\") #>  #> ── Column specification ──────────────────────────────────────────────────────── #> cols( #>   .default = col_double(), #>   `Well Position` = col_character(), #>   Omit = col_logical(), #>   `Sample Name` = col_character(), #>   `Target Name` = col_character(), #>   Task = col_character(), #>   Reporter = col_character(), #>   Quencher = col_character(), #>   Quantity = col_logical(), #>   `Quantity Mean` = col_logical(), #>   `Quantity SD` = col_logical(), #>   CT = col_character(), #>   `Delta Ct` = col_logical(), #>   `Automatic Ct Threshold` = col_logical(), #>   `Automatic Baseline` = col_logical(), #>   Comments = col_logical() #> ) #> ℹ Use `spec()` for the full column specifications. #> pcr is not tidy, tidying. #> <pcr[8]> #>  #>                              24 #>     ________________________________________________ #>    | ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ #>    | ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ #>    | ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ #>    | ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ #>    | ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ #>    | ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ #>    | ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ #>    | ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ #> 16 | ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ #>    | ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ #>    | ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ #>    | ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ #>    | ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ #>    | ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ #>    | ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ #>    | ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ #>  #>  #> Start corner: tl #> Plate dimensions: 16 x 24 #> # Experiment type: comparative_ct  #> # Wells: 384  #> # Is tidy: TRUE  #> # Date: 2020-08-21"},{"path":"https://kaiaragaki.github.io/amplify/reference/pcr_lib_calc.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate library PCR concentrations — pcr_lib_calc","title":"Calculate library PCR concentrations — pcr_lib_calc","text":"Calculate library PCR concentrations","code":""},{"path":"https://kaiaragaki.github.io/amplify/reference/pcr_lib_calc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate library PCR concentrations — pcr_lib_calc","text":"","code":"pcr_lib_calc(pcr, dil_factor = 1000)"},{"path":"https://kaiaragaki.github.io/amplify/reference/pcr_lib_calc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate library PCR concentrations — pcr_lib_calc","text":"pcr pcr object. tidied already. dil_factor integer. factor libraries diluted pcr","code":""},{"path":"https://kaiaragaki.github.io/amplify/reference/pcr_lib_calc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate library PCR concentrations — pcr_lib_calc","text":"pcr object, containing input columns well : standard_diff differences ct_mean standard one step dilution (ie concentrated, lower Ct). concentrated dilution value 0 dil 2^(standard_diff). accuracy metric assumes efficiency PCR 100%, likely good perfect! case first standard, dil = 0 quant_actual standards, presumed quantity standard, calculated dil. samples, quantity concentrationThe concentration library, dilution","code":""},{"path":"https://kaiaragaki.github.io/amplify/reference/pcr_lib_calc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate library PCR concentrations — pcr_lib_calc","text":"","code":"system.file(\"extdata\", \"untidy-standard-curve.xlsx\", package = \"amplify\") |>   read_pcr() |>   pcr_lib_calc() #>  #> ── Column specification ──────────────────────────────────────────────────────── #> cols( #>   .default = col_double(), #>   `Well Position` = col_character(), #>   Omit = col_logical(), #>   `Sample Name` = col_character(), #>   `Target Name` = col_character(), #>   Task = col_character(), #>   Reporter = col_character(), #>   Quencher = col_character(), #>   CT = col_character(), #>   `Automatic Ct Threshold` = col_logical(), #>   `Automatic Baseline` = col_logical(), #>   Comments = col_logical() #> ) #> ℹ Use `spec()` for the full column specifications. #> ! Multiple files in zip: reading ''[Content_Types].xml'' #> pcr is not tidy, tidying. #> <pcr[8]> #>  #>                 12 #>    ________________________ #>   | ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ #>   | ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ #>   | ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ #>   | ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ #> 8 | ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ #>   | ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ #>   | ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ #>   | ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ #>  #>  #> Start corner: tl #> Plate dimensions: 8 x 12 #> # Experiment type: standard_curve  #> # Wells: 96  #> # Is tidy: TRUE  #> # Date: 2020-03-11"},{"path":"https://kaiaragaki.github.io/amplify/reference/pcr_lib_qc.html","id":null,"dir":"Reference","previous_headings":"","what":"Create library prep quality control data — pcr_lib_qc","title":"Create library prep quality control data — pcr_lib_qc","text":"Create library prep quality control data","code":""},{"path":"https://kaiaragaki.github.io/amplify/reference/pcr_lib_qc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create library prep quality control data — pcr_lib_qc","text":"","code":"pcr_lib_qc(lib_calc_pcr)"},{"path":"https://kaiaragaki.github.io/amplify/reference/pcr_lib_qc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create library prep quality control data — pcr_lib_qc","text":"lib_calc_pcr pcr object, output pcr_lib_calc","code":""},{"path":"https://kaiaragaki.github.io/amplify/reference/pcr_lib_qc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create library prep quality control data — pcr_lib_qc","text":"pcr object  list : standards Data individual standards, including calculated dilutions, given calculated quantities, raw Ct, etc. samples Data individual samples, including calculated concentrations, raw Ct, etc. sample_summary Summary statistics samples grouped replicates standard_summary Summary statistics standards groupd replicates outliers Data individual samples standards without putative outliers (po) per replicate group","code":""},{"path":"https://kaiaragaki.github.io/amplify/reference/pcr_lib_qc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create library prep quality control data — pcr_lib_qc","text":"output function can theoretically used gauge library quality, best used conjunction function like pcr_lib_calc_report","code":""},{"path":"https://kaiaragaki.github.io/amplify/reference/pcr_lib_qc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create library prep quality control data — pcr_lib_qc","text":"","code":"system.file(\"extdata\", \"untidy-standard-curve.xlsx\", package = \"amplify\") |>   pcr_tidy(pad_zero = TRUE) |>   pcr_lib_calc() |>   pcr_lib_qc() #> Error in pcr_tidy(system.file(\"extdata\", \"untidy-standard-curve.xlsx\",     package = \"amplify\"), pad_zero = TRUE): could not find function \"pcr_tidy\""},{"path":"https://kaiaragaki.github.io/amplify/reference/pcr_lib_qc_plot_conc.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot concentration of libraries across samples — pcr_lib_qc_plot_conc","title":"Plot concentration of libraries across samples — pcr_lib_qc_plot_conc","text":"Plot concentration libraries across samples","code":""},{"path":"https://kaiaragaki.github.io/amplify/reference/pcr_lib_qc_plot_conc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot concentration of libraries across samples — pcr_lib_qc_plot_conc","text":"","code":"pcr_lib_qc_plot_conc(lib_qc)"},{"path":"https://kaiaragaki.github.io/amplify/reference/pcr_lib_qc_plot_conc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot concentration of libraries across samples — pcr_lib_qc_plot_conc","text":"lib_qc Output pcr_lib_qc","code":""},{"path":"https://kaiaragaki.github.io/amplify/reference/pcr_lib_qc_plot_conc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot concentration of libraries across samples — pcr_lib_qc_plot_conc","text":"ggplot","code":""},{"path":"https://kaiaragaki.github.io/amplify/reference/pcr_lib_qc_plot_conc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot concentration of libraries across samples — pcr_lib_qc_plot_conc","text":"","code":"system.file(\"extdata\", \"untidy-standard-curve.xlsx\", package = \"amplify\") |>   pcr_tidy(pad_zero = TRUE) |>   pcr_lib_calc() |>   pcr_lib_qc() |>   pcr_lib_qc_plot_conc() #> Error in pcr_tidy(system.file(\"extdata\", \"untidy-standard-curve.xlsx\",     package = \"amplify\"), pad_zero = TRUE): could not find function \"pcr_tidy\""},{"path":"https://kaiaragaki.github.io/amplify/reference/pcr_lib_qc_plot_dil.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot standard dilutions compared to a perfect dilution — pcr_lib_qc_plot_dil","title":"Plot standard dilutions compared to a perfect dilution — pcr_lib_qc_plot_dil","text":"Plot standard dilutions compared perfect dilution","code":""},{"path":"https://kaiaragaki.github.io/amplify/reference/pcr_lib_qc_plot_dil.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot standard dilutions compared to a perfect dilution — pcr_lib_qc_plot_dil","text":"","code":"pcr_lib_qc_plot_dil(lib_qc)"},{"path":"https://kaiaragaki.github.io/amplify/reference/pcr_lib_qc_plot_dil.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot standard dilutions compared to a perfect dilution — pcr_lib_qc_plot_dil","text":"lib_qc Output pcr_lib_qc","code":""},{"path":"https://kaiaragaki.github.io/amplify/reference/pcr_lib_qc_plot_dil.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot standard dilutions compared to a perfect dilution — pcr_lib_qc_plot_dil","text":"ggplot","code":""},{"path":"https://kaiaragaki.github.io/amplify/reference/pcr_lib_qc_plot_dil.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot standard dilutions compared to a perfect dilution — pcr_lib_qc_plot_dil","text":"optimal dilution show blue grey dots perfectly aligned. plot blue dots consistently lagging behind gray dots implies dilutions consistent, less dilute 1:10 dilution. Likewise, plot blue dots consistently outpace gray dots passing dot signifies consistently -diluting standards. Samples shown red dots.","code":""},{"path":"https://kaiaragaki.github.io/amplify/reference/pcr_lib_qc_plot_dil.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot standard dilutions compared to a perfect dilution — pcr_lib_qc_plot_dil","text":"","code":"system.file(\"extdata\", \"untidy-standard-curve.xlsx\", package = \"amplify\") |>   pcr_tidy() |>   pcr_lib_calc() |>   pcr_lib_qc() |>   pcr_lib_qc_plot_dil() #> Error in pcr_tidy(system.file(\"extdata\", \"untidy-standard-curve.xlsx\",     package = \"amplify\")): could not find function \"pcr_tidy\""},{"path":"https://kaiaragaki.github.io/amplify/reference/pcr_lib_qc_plot_outliers.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot mean centered samples without putative outliers — pcr_lib_qc_plot_outliers","title":"Plot mean centered samples without putative outliers — pcr_lib_qc_plot_outliers","text":"Plot mean centered samples without putative outliers","code":""},{"path":"https://kaiaragaki.github.io/amplify/reference/pcr_lib_qc_plot_outliers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot mean centered samples without putative outliers — pcr_lib_qc_plot_outliers","text":"","code":"pcr_lib_qc_plot_outliers(lib_qc)"},{"path":"https://kaiaragaki.github.io/amplify/reference/pcr_lib_qc_plot_outliers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot mean centered samples without putative outliers — pcr_lib_qc_plot_outliers","text":"lib_qc Output pcr_lib_qc","code":""},{"path":"https://kaiaragaki.github.io/amplify/reference/pcr_lib_qc_plot_outliers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot mean centered samples without putative outliers — pcr_lib_qc_plot_outliers","text":"ggplot","code":""},{"path":"https://kaiaragaki.github.io/amplify/reference/pcr_lib_qc_plot_outliers.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot mean centered samples without putative outliers — pcr_lib_qc_plot_outliers","text":"sample deemed outlier , upon removal, 3Z mean remaining. boundary +/-3Z demarcated shaded area. Gray samples outliers. Samples |Z| > 10 away denoted arrows (<<<) pointing direction well Z","code":""},{"path":"https://kaiaragaki.github.io/amplify/reference/pcr_lib_qc_plot_outliers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot mean centered samples without putative outliers — pcr_lib_qc_plot_outliers","text":"","code":"system.file(\"extdata\", \"untidy-standard-curve.xlsx\", package = \"amplify\") |>   pcr_tidy(pad_zero = TRUE) |>   pcr_lib_calc() |>   pcr_lib_qc() |>   pcr_lib_qc_plot_outliers() #> Error in pcr_tidy(system.file(\"extdata\", \"untidy-standard-curve.xlsx\",     package = \"amplify\"), pad_zero = TRUE): could not find function \"pcr_tidy\""},{"path":"https://kaiaragaki.github.io/amplify/reference/pcr_lib_qc_plot_slope.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the log of library quantities vs Ct — pcr_lib_qc_plot_slope","title":"Plot the log of library quantities vs Ct — pcr_lib_qc_plot_slope","text":"Plot log library quantities vs Ct","code":""},{"path":"https://kaiaragaki.github.io/amplify/reference/pcr_lib_qc_plot_slope.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the log of library quantities vs Ct — pcr_lib_qc_plot_slope","text":"","code":"pcr_lib_qc_plot_slope(lib_qc)"},{"path":"https://kaiaragaki.github.io/amplify/reference/pcr_lib_qc_plot_slope.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the log of library quantities vs Ct — pcr_lib_qc_plot_slope","text":"lib_qc Output pcr_lib_qc","code":""},{"path":"https://kaiaragaki.github.io/amplify/reference/pcr_lib_qc_plot_slope.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the log of library quantities vs Ct — pcr_lib_qc_plot_slope","text":"ggplot","code":""},{"path":"https://kaiaragaki.github.io/amplify/reference/pcr_lib_qc_plot_slope.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot the log of library quantities vs Ct — pcr_lib_qc_plot_slope","text":"optimal plot slope -3.32. expect sample 10x concentrated another reach abundance 3.32 doublings FASTER (, 3.32 fewer doubles, Cts). Therefore, 10x increase concentration (one point left right plot) expect decrease CT 3.32. steeper slope (negative) implies poorer efficiency (cycles required reach 10x perfect doubling imply)","code":""},{"path":"https://kaiaragaki.github.io/amplify/reference/pcr_lib_qc_plot_slope.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the log of library quantities vs Ct — pcr_lib_qc_plot_slope","text":"","code":"system.file(\"extdata\", \"untidy-standard-curve.xlsx\", package = \"amplify\") |>   pcr_tidy(pad_zero = TRUE) |>   pcr_lib_calc() |>   pcr_lib_qc() |>   pcr_lib_qc_plot_slope() #> Error in pcr_tidy(system.file(\"extdata\", \"untidy-standard-curve.xlsx\",     package = \"amplify\"), pad_zero = TRUE): could not find function \"pcr_tidy\""},{"path":"https://kaiaragaki.github.io/amplify/reference/pcr_lib_qc_report.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate visual library prep pcr quality control report — pcr_lib_qc_report","title":"Generate visual library prep pcr quality control report — pcr_lib_qc_report","text":"Generate visual library prep pcr quality control report","code":""},{"path":"https://kaiaragaki.github.io/amplify/reference/pcr_lib_qc_report.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate visual library prep pcr quality control report — pcr_lib_qc_report","text":"","code":"pcr_lib_qc_report(pcr_lib_qc, report_path = NULL)"},{"path":"https://kaiaragaki.github.io/amplify/reference/pcr_lib_qc_report.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate visual library prep pcr quality control report — pcr_lib_qc_report","text":"pcr_lib_qc output pcr_lib_qc report_path name report well output. NULL, export temp directory","code":""},{"path":"https://kaiaragaki.github.io/amplify/reference/pcr_lib_qc_report.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate visual library prep pcr quality control report — pcr_lib_qc_report","text":"path report","code":""},{"path":"https://kaiaragaki.github.io/amplify/reference/pcr_lib_qc_report.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate visual library prep pcr quality control report — pcr_lib_qc_report","text":"","code":"system.file(\"extdata\", \"untidy-standard-curve.xlsx\", package = \"amplify\") |>   pcr_tidy() |>   pcr_lib_calc() |>   pcr_lib_qc() |>   pcr_lib_qc_report() #> Error in pcr_tidy(system.file(\"extdata\", \"untidy-standard-curve.xlsx\",     package = \"amplify\")): could not find function \"pcr_tidy\""},{"path":"https://kaiaragaki.github.io/amplify/reference/pcr_plan.html","id":null,"dir":"Reference","previous_headings":"","what":"Plan PCR experiment — pcr_plan","title":"Plan PCR experiment — pcr_plan","text":"Plan PCR experiment","code":""},{"path":"https://kaiaragaki.github.io/amplify/reference/pcr_plan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plan PCR experiment — pcr_plan","text":"","code":"pcr_plan(   data,   n_primers,   format = 384,   exclude_border = TRUE,   primer_names = NULL,   headless = TRUE,   has_names = TRUE )"},{"path":"https://kaiaragaki.github.io/amplify/reference/pcr_plan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plan PCR experiment — pcr_plan","text":"data data.frame, samples first column (has_names = TRUE) RNA concentrations second (first, has_names = FALSE) n_primers integer. Number primers used experiment. format integer. 96 384 - number wells plate planned used exclude_border logical. border excluded avoid edge effects? Default TRUE. primer_names character vector. Names primers. headless logical. FALSE, return invisible redirect shiny application. has_names logical. first column names samples?","code":""},{"path":"https://kaiaragaki.github.io/amplify/reference/pcr_plan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plan PCR experiment — pcr_plan","text":"named list","code":""},{"path":"https://kaiaragaki.github.io/amplify/reference/pcr_plan.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plan PCR experiment — pcr_plan","text":"","code":"dummy_rna_conc |>   pcr_plan(n_primers = 3) #> $mm_prep #> # A tibble: 4 × 2 #>   reagent             vol #>   <chr>             <dbl> #> 1 2X RT-PCR Buffer  206.  #> 2 Primer             20.6 #> 3 25X RT-PCR Enzyme  16.5 #> 4 Nuclease Free H2O 103.  #>  #> $sample_prep #> # A tibble: 8 × 7 #>   sample       conc dilution_factor diluted_concentration diluted_rna_to_add #>   <chr>       <dbl>           <int>                 <dbl>              <dbl> #> 1 24hr_DMSO_1 127.                1                 127.                1.18 #> 2 48hr_DMSO_1  93                 1                  93                 1.61 #> 3 24hr_1uM_1  143.                1                 143.                1.05 #> 4 48hr_1uM_1   67.1               1                  67.1               2.24 #> 5 24hr_DMSO_2  88.3               1                  88.3               1.70 #> 6 48hr_DMSO_2 124.                1                 124.                1.21 #> 7 24hr_1uM_2   94.2               1                  94.2               1.59 #> 8 48hr_1uM_2   80.2               1                  80.2               1.87 #> # ℹ 2 more variables: water_to_add <dbl>, final_vol <dbl> #>  #> $plate #>  #>       3 #>    ______ #> 1 | ◯ ◯ ◯ #>  #>  #> Start corner: tl #> Plate dimensions: 16 x 24 #>  #> $n_primers #> [1] 3 #>  #> $format #> [1] \"384\" #>  #> $exclude_border #> [1] TRUE #>  #> $primer_names #> NULL #>"},{"path":"https://kaiaragaki.github.io/amplify/reference/pcr_plan_report.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a report from a PCR plan — pcr_plan_report","title":"Create a report from a PCR plan — pcr_plan_report","text":"Create report PCR plan","code":""},{"path":"https://kaiaragaki.github.io/amplify/reference/pcr_plan_report.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a report from a PCR plan — pcr_plan_report","text":"","code":"pcr_plan_report(pcr_plan, file_path = NULL)"},{"path":"https://kaiaragaki.github.io/amplify/reference/pcr_plan_report.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a report from a PCR plan — pcr_plan_report","text":"pcr_plan output pcr_plan file_path report written, well file name. Defaults temp file.","code":""},{"path":"https://kaiaragaki.github.io/amplify/reference/pcr_plan_report.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a report from a PCR plan — pcr_plan_report","text":"named list, like output pcr_plan, output file path appended.","code":""},{"path":"https://kaiaragaki.github.io/amplify/reference/pcr_plan_report.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a report from a PCR plan — pcr_plan_report","text":"","code":"dummy_rna_conc |>   pcr_plan(n_primers = 3) |>   pcr_plan_report() #>  #>  #> processing file: pcr_report-template.Rmd #> 1/8                   #> 2/8 [unnamed-chunk-1] #> 3/8                   #> 4/8 [unnamed-chunk-2] #> 5/8                   #> 6/8 [unnamed-chunk-3] #> 7/8                   #> 8/8 [unnamed-chunk-4] #> output file: pcr_report-template.knit.md #> /opt/hostedtoolcache/pandoc/3.1.11/x64/pandoc +RTS -K512m -RTS pcr_report-template.knit.md --to html4 --from markdown+autolink_bare_uris+tex_math_single_backslash --output /tmp/RtmpkiZ8bd/2024-10-05_pcr-report_17262c4cde42.html --lua-filter /home/runner/work/_temp/Library/rmarkdown/rmarkdown/lua/pagebreak.lua --lua-filter /home/runner/work/_temp/Library/rmarkdown/rmarkdown/lua/latex-div.lua --embed-resources --standalone --variable bs3=TRUE --section-divs --template /home/runner/work/_temp/Library/rmarkdown/rmd/h/default.html --no-highlight --variable highlightjs=1 --variable theme=bootstrap --mathjax --variable 'mathjax-url=https://mathjax.rstudio.com/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML' --include-in-header /tmp/RtmpkiZ8bd/rmarkdown-str172635d1aa4a.html  #>  #> Output created: /tmp/RtmpkiZ8bd/2024-10-05_pcr-report_17262c4cde42.html #> $mm_prep #> # A tibble: 4 × 2 #>   reagent             vol #>   <chr>             <dbl> #> 1 2X RT-PCR Buffer  206.  #> 2 Primer             20.6 #> 3 25X RT-PCR Enzyme  16.5 #> 4 Nuclease Free H2O 103.  #>  #> $sample_prep #> # A tibble: 8 × 7 #>   sample       conc dilution_factor diluted_concentration diluted_rna_to_add #>   <chr>       <dbl>           <int>                 <dbl>              <dbl> #> 1 24hr_DMSO_1 127.                1                 127.                1.18 #> 2 48hr_DMSO_1  93                 1                  93                 1.61 #> 3 24hr_1uM_1  143.                1                 143.                1.05 #> 4 48hr_1uM_1   67.1               1                  67.1               2.24 #> 5 24hr_DMSO_2  88.3               1                  88.3               1.70 #> 6 48hr_DMSO_2 124.                1                 124.                1.21 #> 7 24hr_1uM_2   94.2               1                  94.2               1.59 #> 8 48hr_1uM_2   80.2               1                  80.2               1.87 #> # ℹ 2 more variables: water_to_add <dbl>, final_vol <dbl> #>  #> $plate #>  #>       3 #>    ______ #> 1 | ◯ ◯ ◯ #>  #>  #> Start corner: tl #> Plate dimensions: 16 x 24 #>  #> $n_primers #> [1] 3 #>  #> $format #> [1] \"384\" #>  #> $exclude_border #> [1] TRUE #>  #> $primer_names #> NULL #>  #> $file_path #> [1] \"/tmp/RtmpkiZ8bd/2024-10-05_pcr-report_17262c4cde42.html\" #>"},{"path":"https://kaiaragaki.github.io/amplify/reference/pcr_plate_view.html","id":null,"dir":"Reference","previous_headings":"","what":"View sample plating layout — pcr_plate_view","title":"View sample plating layout — pcr_plate_view","text":"View sample plating layout","code":""},{"path":"https://kaiaragaki.github.io/amplify/reference/pcr_plate_view.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"View sample plating layout — pcr_plate_view","text":"","code":"pcr_plate_view(pcr, fill = target_name)"},{"path":"https://kaiaragaki.github.io/amplify/reference/pcr_plate_view.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"View sample plating layout — pcr_plate_view","text":"fill character. column tidy_pcr used use fill geom_tiles tidy_pcr output pcr_tidy function","code":""},{"path":"https://kaiaragaki.github.io/amplify/reference/pcr_plate_view.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"View sample plating layout — pcr_plate_view","text":"ggplot","code":""},{"path":"https://kaiaragaki.github.io/amplify/reference/pcr_plate_view.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"View sample plating layout — pcr_plate_view","text":"","code":"system.file(\"extdata\", \"untidy-pcr-example.xls\", package = \"amplify\") |>   read_pcr() |>   pcr_plate_view() #>  #> ── Column specification ──────────────────────────────────────────────────────── #> cols( #>   .default = col_double(), #>   `Well Position` = col_character(), #>   Omit = col_logical(), #>   `Sample Name` = col_character(), #>   `Target Name` = col_character(), #>   Task = col_character(), #>   Reporter = col_character(), #>   Quencher = col_character(), #>   Quantity = col_logical(), #>   `Quantity Mean` = col_logical(), #>   `Quantity SD` = col_logical(), #>   CT = col_character(), #>   `Delta Ct` = col_logical(), #>   `Automatic Ct Threshold` = col_logical(), #>   `Automatic Baseline` = col_logical(), #>   Comments = col_logical() #> ) #> ℹ Use `spec()` for the full column specifications. #> pcr is not tidy, tidying."},{"path":"https://kaiaragaki.github.io/amplify/reference/pcr_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot qPCR results — pcr_plot","title":"Plot qPCR results — pcr_plot","text":"Plot qPCR results","code":""},{"path":"https://kaiaragaki.github.io/amplify/reference/pcr_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot qPCR results — pcr_plot","text":"","code":"pcr_plot(x, ...)  # S3 method for class 'pcr' pcr_plot(x, ...)  # S3 method for class 'data.frame' pcr_plot(x, ...)"},{"path":"https://kaiaragaki.github.io/amplify/reference/pcr_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot qPCR results — pcr_plot","text":"x pcr object data.frame","code":""},{"path":"https://kaiaragaki.github.io/amplify/reference/pcr_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot qPCR results — pcr_plot","text":"ggplot","code":""},{"path":"https://kaiaragaki.github.io/amplify/reference/pcr_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot qPCR results — pcr_plot","text":"","code":"system.file(\"extdata\", \"untidy-pcr-example.xls\", package = \"amplify\") |>   pcr_tidy() |>   pcr_rq(\"RD1\") |>   pcr_plot() #> Error in pcr_tidy(system.file(\"extdata\", \"untidy-pcr-example.xls\", package = \"amplify\")): could not find function \"pcr_tidy\""},{"path":"https://kaiaragaki.github.io/amplify/reference/pcr_rq.html","id":null,"dir":"Reference","previous_headings":"","what":"Recalculate relative quantities for a given experiment — pcr_rq","title":"Recalculate relative quantities for a given experiment — pcr_rq","text":"Recalculate relative quantities given experiment","code":""},{"path":"https://kaiaragaki.github.io/amplify/reference/pcr_rq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recalculate relative quantities for a given experiment — pcr_rq","text":"","code":"pcr_rq(x, relative_sample, control_probe = NULL, ...)  # S3 method for class 'pcr' pcr_rq(x, relative_sample, control_probe = NULL, ...)  # S3 method for class 'data.frame' pcr_rq(x, relative_sample, control_probe = NULL, ...)"},{"path":"https://kaiaragaki.github.io/amplify/reference/pcr_rq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recalculate relative quantities for a given experiment — pcr_rq","text":"x pcr data.frame relative_sample sample set others relative (eg my_dmso_sample) control_probe Character. target_name serve endogenous control. ... Arguments passed respective method","code":""},{"path":"https://kaiaragaki.github.io/amplify/reference/pcr_rq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Recalculate relative quantities for a given experiment — pcr_rq","text":"object class x","code":""},{"path":"https://kaiaragaki.github.io/amplify/reference/pcr_rq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Recalculate relative quantities for a given experiment — pcr_rq","text":"","code":"dat_path <- system.file(\"extdata\", \"untidy-pcr-example.xls\", package = \"amplify\")  read_pcr(dat_path) |>   pcr_rq(\"U6D1\") #>  #> ── Column specification ──────────────────────────────────────────────────────── #> cols( #>   .default = col_double(), #>   `Well Position` = col_character(), #>   Omit = col_logical(), #>   `Sample Name` = col_character(), #>   `Target Name` = col_character(), #>   Task = col_character(), #>   Reporter = col_character(), #>   Quencher = col_character(), #>   Quantity = col_logical(), #>   `Quantity Mean` = col_logical(), #>   `Quantity SD` = col_logical(), #>   CT = col_character(), #>   `Delta Ct` = col_logical(), #>   `Automatic Ct Threshold` = col_logical(), #>   `Automatic Baseline` = col_logical(), #>   Comments = col_logical() #> ) #> ℹ Use `spec()` for the full column specifications. #> pcr is not tidy, tidying. #> <pcr[8]> #>  #>                              24 #>     ________________________________________________ #>    | ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ #>    | ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ #>    | ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ #>    | ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ #>    | ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ #>    | ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ #>    | ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ #>    | ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ #> 16 | ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ #>    | ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ #>    | ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ #>    | ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ #>    | ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ #>    | ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ #>    | ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ #>    | ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ #>  #>  #> Start corner: tl #> Plate dimensions: 16 x 24 #> # Experiment type: comparative_ct  #> # Wells: 384  #> # Is tidy: TRUE  #> # Date: 2020-08-21   # Can also be run after using pcr_control: read_pcr(dat_path) |>   pcr_control(\"GAPDH\") |>   pcr_rq(\"U6D1\") #>  #> ── Column specification ──────────────────────────────────────────────────────── #> cols( #>   .default = col_double(), #>   `Well Position` = col_character(), #>   Omit = col_logical(), #>   `Sample Name` = col_character(), #>   `Target Name` = col_character(), #>   Task = col_character(), #>   Reporter = col_character(), #>   Quencher = col_character(), #>   Quantity = col_logical(), #>   `Quantity Mean` = col_logical(), #>   `Quantity SD` = col_logical(), #>   CT = col_character(), #>   `Delta Ct` = col_logical(), #>   `Automatic Ct Threshold` = col_logical(), #>   `Automatic Baseline` = col_logical(), #>   Comments = col_logical() #> ) #> ℹ Use `spec()` for the full column specifications. #> pcr is not tidy, tidying. #> <pcr[8]> #>  #>                              24 #>     ________________________________________________ #>    | ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ #>    | ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ #>    | ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ #>    | ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ #>    | ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ #>    | ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ #>    | ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ #>    | ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ #> 16 | ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ #>    | ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ #>    | ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ #>    | ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ #>    | ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ #>    | ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ #>    | ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ #>    | ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ ◯ #>  #>  #> Start corner: tl #> Plate dimensions: 16 x 24 #> # Experiment type: comparative_ct  #> # Wells: 384  #> # Is tidy: TRUE  #> # Date: 2020-08-21"},{"path":"https://kaiaragaki.github.io/amplify/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. gplate well_data mop as_pcr, read_pcr, scrub, tidy_lab","code":""}]
